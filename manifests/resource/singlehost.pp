#
# This definition creates a virtual host
#
# Parameters:
#   [*ensure*]           - Enables or disables the specified vhost (present|absent)
#   [*listen_ip*]        - Default IP Address for NGINX to listen with this vHost on. Defaults to all interfaces (*)
#   [*listen_port*]      - Default IP Port for NGINX to listen with this vHost on. Defaults to TCP 80 (443 if ssl_cert is given)
#   [*ipv6_enable*]      - BOOL value to enable/disable IPv6 support (false|true). Module will check to see if IPv6
#                          support exists on your system before enabling.
#   [*ipv6_listen_ip*]   - Default IPv6 Address for NGINX to listen with this vHost on. Defaults to all interfaces (::)
#   [*ipv6_listen_port*] - Default IPv6 Port for NGINX to listen with this vHost on. Defaults to $listen_port
#   [*default_server*]   - BOOL value to mark this server as default server which is choosen if no hostname is given on the request.
#                          Default: false. Example: default_server => 'true'
#   [*index_files*]      - Default index files for NGINX to read when traversing a directory
#   [*proxy*]            - Proxy server(s) for the root location to connect to.  Accepts a single value, can be used in
#                          conjunction with nginx::resource::upstream
#   [*proxy_read_timeout*] - Override the default the proxy read timeout value of 90 seconds
#   [*ssl_cert*]         - Pre-generated SSL Certificate file to reference for SSL Support. This is not generated by this module.
#                          This activates ssl-settings for this host
#   [*ssl_key*]          - Pre-generated SSL Key file to reference for SSL Support. This is not generated by this module.
#   [*www_root*]         - Specifies the location on disk for files to be read from. Cannot be set in conjunction with $proxy
#   [*redirect*]         - Specifies a 301 redirection. You can either set proxy, www_root or redirect.
#                          The request_uri is automatically appended. Usage example: redirect => 'http://www.example.org'
#
# Actions:
#
# Requires:
#
# Sample Usage:
#  nginx::resource::vhost { 'test2.local:80':   # server_name and listen_port are extracted from this name
#    ensure   => present,
#    www_root => '/var/www/nginx-default',
#    ssl      => present,
#    ssl_cert => '/tmp/server.crt',
#    ssl_key  => '/tmp/server.pem',
#  }
define nginx::resource::singlehost(
  $ensure              = 'present',
  $listen_ip           = '*',
  $listen_port         = undef,
  $ipv6_enable         = false,
  $ipv6_listen_ip      = '::',
  $ipv6_listen_port    = undef,
  $default_server      = false,
  $server_name         = undef,
  $ssl_cert            = undef,
  $ssl_key             = undef,
  $proxy               = undef,
  $proxy_read_timeout  = '90',
  $redirect            = undef,
  $index_files         = ['index.html', 'index.htm', 'index.php'],
  $template_header     = 'nginx/vhost/singlehost_header.erb',
  $template_footer     = 'nginx/vhost/vhost_footer.erb',
  $template_proxy      = 'nginx/vhost/vhost_location_proxy.erb',
  $template_directory  = 'nginx/vhost/vhost_location_directory.erb',
  $www_root            = undef
) {

  File {
    owner   => 'root',
    group   => 'root',
    mode    => '0644',
    require => Package['nginx']
  }
  
  # Evaluate pameters to make it more convenient to use
  if ($ssl_cert == undef) and ($ssl_key == undef) {
    $ssl= undef
  } else {
    $ssl= present
    # Check to see if SSL Certificates are properly defined.
    if ($ssl_cert == undef) or ($ssl_key == undef) {
      fail('nginx: SSL certificate /key (ssl_cert/ssl_cert) and/or SSL Private must be defined and exist on the target system(s)')
    }
  }  

  $arr= split($name, ':')
  if ( $server_name == undef ) {
    $real_server_name= $arr[0]
  } else {
    $real_server_name= $server_name
  }
  if ($listen_port == undef) {
    if ( $arr[1] ) {
      $real_listen_port= $arr[1]
    } else {
      if ($ssl == 'present') {
	$real_listen_port = 443
      } else {
	$real_listen_port = 80
      }
    }
  } else {
    if ( $arr[1] and ($arr[1] != $listen_port)) {
      fail("nginx: you defined listen_port=$listen_port and gave another port=${arr[1]} in the name.")
    }
    $real_listen_port= $listen_port
  }

  if ($ipv6_listen_port == undef) {
    $real_ipv6_listen_port= $real_listen_port
  } else {
    $real_ipv6_listen_port= $ipv6_listen_port
  }

  include concat::setup
  concat { "${nginx::config_dir}/sites-available/${name}.conf":
  }

  file { "${nginx::config_dir}/sites-enabled/${name}.conf":
    ensure  => $ensure ? {
      'absent' => absent,
       default  => 'link',
    },
    target => "${nginx::config_dir}/sites-available/${name}.conf",
  }

  # Add IPv6 Logic Check - Nginx service will not start if ipv6 is enabled
  # and support does not exist for it in the kernel.
  if ($ipv6_enable == 'true') and ($ipaddress6)  {
    warning('nginx: IPv6 support is not enabled or configured properly')
  }

  # Use the File Fragment Pattern to construct the configuration files.
  # Create the base configuration file reference.
  concat::fragment { "${name}+01.tmp":
    order   => '01',
    content => template("${template_header}"),
    ensure  => $ensure,
    notify  => $nginx::manage_service_autorestart,
    target  => "${nginx::config_dir}/sites-available/${name}.conf",
  }

  # Create the default location reference for the vHost
  nginx::resource::location {"${name}-default":
    ensure             => $ensure,
    vhost              => $name,
    ssl                => $ssl,
    location           => '/',
    proxy              => $proxy,
    proxy_read_timeout => $proxy_read_timeout,
    www_root           => $www_root,
    redirect           => $redirect,
    notify             => $nginx::manage_service_autorestart,
    template_proxy     => $template_proxy,
    template_directory => $template_directory,
  }

  # Create a proper file close stub.
  concat::fragment { "${name}+69.tmp":
    order   => '69',
    content => template("${template_footer}"),
    ensure  => $ensure,
    notify  => $nginx::manage_service_autorestart,
    target  => "${nginx::config_dir}/sites-available/${name}.conf",
  }

}
